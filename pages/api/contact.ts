import { NextApiRequest, NextApiResponse } from "next";
import nodemailer from "nodemailer";
import { render } from "@react-email/render";

import ContactEmail from "../../emails/contact-email";
import { YandexTrackerService } from "../../lib/yandex-tracker";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  // eslint-disable-next-line no-console
  console.group("üîß BOTTLE [CODE] API Contact Debug");
  // eslint-disable-next-line no-console
  console.log("üìç Request received:", {
    method: req.method,
    url: req.url,
    headers: req.headers,
    timestamp: new Date().toISOString(),
    userAgent: req.headers["user-agent"],
    origin: req.headers.origin,
    referer: req.headers.referer,
  });

  if (req.method !== "POST") {
    // eslint-disable-next-line no-console
    console.warn("‚ùå Method not allowed:", req.method);
    // eslint-disable-next-line no-console
    console.groupEnd();

    return res.status(405).json({ message: "Method not allowed" });
  }

  // eslint-disable-next-line no-console
  console.log("üìä Request body:", req.body);

  const { email, company, message } = req.body;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!email || !message) {
    // eslint-disable-next-line no-console
    console.warn("‚ùå Validation failed:", {
      email: email ? "‚úì" : "‚úó missing",
      message: message ? "‚úì" : "‚úó missing",
      company: company || "not provided",
    });
    // eslint-disable-next-line no-console
    console.groupEnd();

    return res.status(400).json({
      message: "Email –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
    });
  }

  // eslint-disable-next-line no-console
  console.log("‚úÖ Validation passed");
  // eslint-disable-next-line no-console
  console.log("üîß Environment check:", {
    nodeEnv: process.env.NODE_ENV,
    smtpUser: process.env.SMTP_USER ? "‚úì set" : "‚úó missing",
    smtpPass: process.env.SMTP_PASS ? "‚úì set" : "‚úó missing",
    // Legacy Yandex Tracker vars (—Å—Ç–∞—Ä—ã–µ)
    yandexToken: process.env.YANDEX_TRACKER_TOKEN ? "‚úì set" : "‚úó missing",
    yandexOrgId: process.env.YANDEX_TRACKER_ORG_ID ? "‚úì set" : "‚úó missing",
    // New Tracker vars (–Ω–æ–≤—ã–µ)
    trackerPrivateKey: process.env.TRACKER_PRIVATE_KEY ? "‚úì set" : "‚úó missing",
    trackerPrivateKeyB64: process.env.TRACKER_PRIVATE_KEY_B64
      ? "‚úì set"
      : "‚úó missing",
    trackerKeyId: process.env.TRACKER_KEY_ID ? "‚úì set" : "‚úó missing",
    trackerServiceAccount: process.env.TRACKER_SERVICE_ACCOUNT_ID
      ? "‚úì set"
      : "‚úó missing",
    trackerOrgId: process.env.TRACKER_ORG_ID ? "‚úì set" : "‚úó missing",
    trackerQueue: process.env.TRACKER_QUEUE_KEY ? "‚úì set" : "‚úó missing",
  });

  try {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –Ø–Ω–¥–µ–∫—Å.–¢—Ä–µ–∫–µ—Ä–µ
    let taskId = "";

    try {
      // eslint-disable-next-line no-console
      console.log("üéØ Creating Yandex Tracker task...");

      const trackerService = YandexTrackerService.getInstance();
      const trackerResponse = await trackerService.createContactFormIssue(
        email,
        company,
        message,
      );

      taskId = trackerResponse.key || ""; // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
      // eslint-disable-next-line no-console
      console.log("‚úÖ Tracker task created:", {
        taskId,
        response: trackerResponse,
      });
    } catch (trackerError) {
      // eslint-disable-next-line no-console
      console.warn("‚ö†Ô∏è Failed to create tracker task:", {
        error: trackerError,
        message:
          trackerError instanceof Error
            ? trackerError.message
            : String(trackerError),
        stack: trackerError instanceof Error ? trackerError.stack : undefined,
      });
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ ID –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –¢—Ä–µ–∫–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }

    // eslint-disable-next-line no-console
    console.log("üìß Setting up email transport...");

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞ SMTP)
    const transporter = nodemailer.createTransport({
      host: "smtp.yandex.ru",
      port: 465,
      secure: true, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    // eslint-disable-next-line no-console
    console.log("üìß Transport configured:", {
      host: "smtp.yandex.ru",
      port: 465,
      secure: true,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS ? "***set***" : "***missing***",
      },
    });

    // eslint-disable-next-line no-console
    console.log("üé® Rendering email template...");

    // –†–µ–Ω–¥–µ—Ä–∏–º React Email –≤ HTML
    const emailHtml = await render(
      ContactEmail({
        email,
        company,
        message,
        taskId, // –ü–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–¥–∞—á–∏ –≤ email
      }),
    );

    // eslint-disable-next-line no-console
    console.log("‚úÖ Email template rendered, size:", emailHtml.length, "chars");

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞ —Å ID –∑–∞–¥–∞—á–∏
    const subjectPrefix = taskId ? `[${taskId}] ` : "";
    const emailSubject = `${subjectPrefix}–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ - BOTTLE [CODE]`;

    const mailOptions = {
      from: process.env.SMTP_USER,
      to: email, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      bcc: "bottlecode@v-b.tech", // –°–∫—Ä—ã—Ç–∞—è –∫–æ–ø–∏—è –Ω–∞ –Ω–æ–≤—ã–π email
      subject: emailSubject,
      html: emailHtml,
    };

    // eslint-disable-next-line no-console
    console.log("üì¨ Sending email with options:", {
      from: mailOptions.from,
      to: mailOptions.to,
      bcc: mailOptions.bcc,
      subject: mailOptions.subject,
      htmlSize: emailHtml.length,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ —Å–∫—Ä—ã—Ç–æ–π –∫–æ–ø–∏–µ–π –Ω–∞ bottlecode@v-b.tech
    const emailResult = await transporter.sendMail(mailOptions);

    // eslint-disable-next-line no-console
    console.log("‚úÖ Email sent successfully:", {
      messageId: emailResult.messageId,
      response: emailResult.response,
      accepted: emailResult.accepted,
      rejected: emailResult.rejected,
    });

    const successResponse = {
      message: "–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      taskId: taskId || null,
      debug: {
        timestamp: new Date().toISOString(),
        emailSent: true,
        trackerTaskCreated: !!taskId,
      },
    };

    // eslint-disable-next-line no-console
    console.log("üéâ Success response:", successResponse);
    // eslint-disable-next-line no-console
    console.groupEnd();

    res.status(200).json(successResponse);
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("üí• Server error occurred:", {
      error: error,
      message: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString(),
    });

    // eslint-disable-next-line no-console
    console.groupEnd();

    const errorResponse = {
      message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      debug: {
        timestamp: new Date().toISOString(),
        error: error instanceof Error ? error.message : String(error),
      },
    };

    res.status(500).json(errorResponse);
  }
}
